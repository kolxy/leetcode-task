/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    string split = ",";
    string nullnode = "null";//null
    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        StringBuilder res = new StringBuilder();
        if(root == null)
            return "";
        Queue<TreeNode> queue = new Queue<TreeNode>();
        queue.Enqueue(root);
        
        while(queue.Count > 0)
        {
            int size = queue.Count;
            while(size >0)
            {
                size--;
                var node =queue.Dequeue();
                if(node == null)
                {
                    res.Append(split + nullnode);
                }
                else
                {
                    res.Append(split + node.val);
                    queue.Enqueue(node.left);
                    queue.Enqueue(node.right);
                }
                
            }
           // Console.WriteLine(res);
        }
        
        return res.ToString().Remove(0,1);
    }

    
    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        TreeNode root = new TreeNode();
        if(data == "")
            return null;
        string[] str = data.Split(split[0]);
        root.val = Convert.ToInt32(str[0]);
        Queue<TreeNode> queue = new Queue<TreeNode>();
        queue.Enqueue(root);
        int cur =1;
        while(cur < str.Length && queue.Count >0 )
        {
            //Console.WriteLine(queue.Count);
            var node = queue.Dequeue();
            if(str[cur] != nullnode)
            {
                var left = new TreeNode(Convert.ToInt32(str[cur]));
                node.left = left;
                queue.Enqueue(left);
            }
            cur++;
            if(str[cur] != nullnode)
            {
                var right = new TreeNode(Convert.ToInt32(str[cur]));
                node.right = right;
                queue.Enqueue(right);
            }
            cur++;
        }
        
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
