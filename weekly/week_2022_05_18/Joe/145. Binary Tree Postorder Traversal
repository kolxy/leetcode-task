/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public IList<int> PostorderTraversal(TreeNode root) {
        List<int> res = new List<int>();
        if(root != null)
        {
            Stack<TreeNode> left = new Stack<TreeNode>();
            Stack<TreeNode> right = new Stack<TreeNode>();
            right.Push(root);

            while(root != null)
            {
               // Console.WriteLine(root.val);
                while(root.right != null)
                {
                    right.Push(root.right);

                    if(root.left != null)
                        left.Push(root.left);

                    root = root.right;
                }

                if(root.left != null)
                    left.Push(root.left);

                if(left.Count >0)
                {
                    root = left.Pop();
                    right.Push(root);
                }
                else
                    root = null;
            }

            while(right.Count >0)
            {
                res.Add(right.Pop().val);
            }
        }
        //DFS(root);
        
        return res;
        
        //     1
        //       2
        //    3      4
        //   5  6  7   8
        //  9
        void DFS(TreeNode node)
        {
            if(node == null)
                return;
            
            res.Add(node.val);
            DFS(node.left);
            DFS(node.right);
        }
    }
}
